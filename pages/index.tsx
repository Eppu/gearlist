import { prisma } from '../lib/prisma';
import Head from 'next/head';
import Image from 'next/image';
import styles from '../styles/Home.module.css';
import LoginButton from '../components/loginButton';
import { useSession, getSession } from 'next-auth/react';
import { Item } from '@prisma/client';
import { GetServerSideProps } from 'next';

async function testCreateUser(name: string, email: string) {
  const response = await fetch('/api/createUser', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ name, email }),
  });
  const data = await response.json();
  console.log(data);
}

async function searchItemTemplates() {
  const response = await fetch('/api/search', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ query: 'leica' }),
  });
  const data = await response.json();
  console.log(data);
}

async function getItemsByUser() {
  const response = await fetch(`/api/test`);
  const data = await response.json();
  console.log(data);
}

function Home({ items }: { items: Item[] }) {
  const { data: session, status } = useSession();
  console.log(items);
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Welcome to <a href="https://nextjs.org">Next.js!</a>
        </h1>
        <LoginButton />

        <button onClick={() => getItemsByUser()}>getget</button>
        {
          // if session exists, show button to get items by user id
          session && (
            <>
              <button onClick={() => getItemsByUser()}>
                get items by user id
              </button>
              <button onClick={() => searchItemTemplates()}>
                search item templates
              </button>
            </>
          )
        }

        {
          // if props exists, show items
          items && (
            <ul>
              {items.map((item) => (
                <div key={item.id}>
                  <h2>{item.title}</h2>
                  Serial number: {item.serialNumber}
                </div>
              ))}
            </ul>
          )
        }
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
}

export const getServerSideProps: GetServerSideProps = async ({ req, res }) => {
  const session = await getSession({ req });

  if (!session) {
    res.statusCode = 403;
    return { props: { items: [] } };
  }
  const items = await prisma.item.findMany({
    where: {
      authorId: session.user.id,
    },
  });

  const cleanedItems = items.map((item) => ({
    ...item,
    createdAt: item.createdAt.toISOString(),
    updatedAt: item.updatedAt.toISOString(),
  }));

  console.log(cleanedItems);

  res.statusCode = 200;
  return {
    props: {
      message: 'hello',
      items: cleanedItems,
    },
  };
};

export default Home;
