import { prisma } from '../lib/prisma';
import Head from 'next/head';
import Image from 'next/image';
import styles from '../styles/Home.module.css';
import LoginButton from '../components/loginButton';
import { useState } from 'react';
import { useSession, getSession } from 'next-auth/react';
import { Item } from '@prisma/client';
import { GetServerSideProps } from 'next';
import { AppHeader } from '../components/Header';
import {
  AppShell,
  Navbar,
  Header,
  MediaQuery,
  Anchor,
  Burger,
  createStyles,
  Aside,
  Footer,
  Center,
  Container,
  Button,
} from '@mantine/core';

async function testCreateUser(name: string, email: string) {
  const response = await fetch('/api/createUser', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ name, email }),
  });
  const data = await response.json();
  console.log(data);
}

async function searchItemTemplates() {
  const response = await fetch('/api/search', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ query: 'leica' }),
  });
  const data = await response.json();
  console.log(data);
}

async function getItemsByUser() {
  const response = await fetch(`/api/test`);
  const data = await response.json();
  console.log(data);
}

function Home({ items }: { items: Item[] }) {
  const { data: session, status } = useSession();

  const useStyles = createStyles((theme) => ({
    navbar: {
      [theme.fn.largerThan('sm')]: {
        display: 'none',
      },
    },

    links: {
      [theme.fn.smallerThan('sm')]: {
        display: 'none',
      },
    },
  }));

  const { classes } = useStyles();

  return (
    <AppShell
      padding="xl"
      header={
        <AppHeader
          links={[
            {
              link: '/',
              label: 'Home',
            },
            {
              link: '/collections',
              label: 'Collections',
            },
            {
              link: '/about',
              label: 'About',
            },
          ]}
        />
      }
      // navbar={
      //   <Navbar className={classes.navbar} width={{ base: '100%', sm: 0 }} hidden={!opened}>
      //     <Anchor>Home</Anchor>
      //     <Anchor>Features</Anchor>
      //     <Anchor>Pricing</Anchor>
      //   </Navbar>
      // }
    >
      <h1>App goes here</h1>
    </AppShell>
    // <div className={styles.container}>
    //   <Head>
    //     <title>Create Next App</title>
    //     <meta name="description" content="Generated by create next app" />
    //     <link rel="icon" href="/favicon.ico" />
    //   </Head>

    //   <main className={styles.main}>
    //     <h1 className={styles.title}>
    //       Welcome to <a href="https://nextjs.org">Next.js!</a>
    //     </h1>
    //     <LoginButton />

    //     <button onClick={() => getItemsByUser()}>getget</button>
    //     {
    //       // if session exists, show button to get items by user id
    //       session && (
    //         <>
    //           <button onClick={() => getItemsByUser()}>get items by user id</button>
    //           <button onClick={() => searchItemTemplates()}>search item templates</button>
    //         </>
    //       )
    //     }

    //     {
    //       // if props exists, show items
    //       items && (
    //         <ul>
    //           {items.map((item) => (
    //             <div key={item.id}>
    //               <h2>{item.title}</h2>
    //               Serial number: {item.serialNumber}
    //             </div>
    //           ))}
    //         </ul>
    //       )
    //     }
    //   </main>
    // </div>
  );
}

export const getServerSideProps: GetServerSideProps = async ({ req, res }) => {
  const session = await getSession({ req });

  if (!session) {
    res.statusCode = 403;
    return { props: { items: [] } };
  }
  const items = await prisma.item.findMany({
    where: {
      authorId: session.user.id,
    },
  });

  const cleanedItems = items.map((item) => ({
    ...item,
    createdAt: item.createdAt.toISOString(),
    updatedAt: item.updatedAt.toISOString(),
  }));

  console.log(cleanedItems);

  res.statusCode = 200;
  return {
    props: {
      message: 'hello',
      items: cleanedItems,
    },
  };
};

export default Home;
